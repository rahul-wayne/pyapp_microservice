# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '74c816c8-4a99-49b6-8f3f-a6f26d9fa25a'
  imageRepository_view: 'viewmicroservice'
  imageRepository_add: 'addmicroservice'
  imageRepository_nginx: 'nginxmicroservice'
  containerRegistry: 'xxdockerimage.azurecr.io'
  dockerfilePath_view: '**/Dockerfile_view_data'
  dockerfilePath_add: '**/Dockerfile_add_data'
  dockerfilePath_nginx: '**/Dockerfile_nginx'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'xxdockerimage392387d0-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: dev
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image view_microservice
      inputs:
        command: buildAndPush
        repository: $(imageRepository_view)
        dockerfile: $(dockerfilePath_view)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - task: Docker@2
      displayName: Build and push an image add_microservice
      inputs:
        command: buildAndPush
        repository: $(imageRepository_add)
        dockerfile: $(dockerfilePath_add)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    
    - task: Docker@2
      displayName: Build and push an image nginx_microservice
      inputs:
        command: buildAndPush
        repository: $(imageRepository_nginx)
        dockerfile: $(dockerfilePath_nginx)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

    - task: Bash@3
      displayName: Cleanup docker image 
      inputs:
        targetType: 'inline'
        script: |
          docker rmi $(containerRegistry)/$(imageRepository_view):$(tag)
          docker rmi $(containerRegistry)/$(imageRepository_add):$(tag)
          docker rmi $(containerRegistry)/$(imageRepository_nginx):$(tag)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      name: dev
      vmImage: $(vmImageName)
    environment: 'rahulwaynepyappmicroservice-1883.pyapp'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository_view):$(tag)
                $(containerRegistry)/$(imageRepository_add):$(tag)
                $(containerRegistry)/$(imageRepository_nginx):$(tag)